//=========================HEADER=============================================================
// Firmware for the Arduino managing the propulsion of the slash platform (UdeS Racecar)
//============================================================================================

/////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////

#include "Arduino.h"
#include <SPI.h>
#include <Servo.h> 
#define USB_USBCON
#include <ros.h>
#include <std_msgs/Float32MultiArray.h>
#include <geometry_msgs/Twist.h>

// For version including IMU:
//#include <sensor_msgs/Imu.h>
//#include <sensor_msgs/MagneticField.h>
//#include "MPU9250.h" 

///////////////////////////////////////////////////////////////////
// Init I/O
///////////////////////////////////////////////////////////////////

// Servo objects for PWM control of
// Sterring servo-motor
Servo steeringServo;
Servo Maxon;

// IMU
//MPU9250 imu(Wire, 0x68);

// ROS
ros::NodeHandle  nodeHandle;

//Publisher 
//const int prop_sensors_msg_length = 18; with IMU data
const int prop_sensors_msg_length = 9;
float prop_sensors_data[ prop_sensors_msg_length ];
std_msgs::Float32MultiArray prop_sensors_msg;
ros::Publisher prop_sensors_pub("prop_sensors", &prop_sensors_msg);

// Serial Communication
const unsigned long baud_rate = 115200;

// Slave Select pins for the encoder
const int slaveSelectEnc = 45;

// Pins for outputs PWM
const int ser_pin = 9;      // Servo 
const int maxon_pin = 10;   // PWM sent to Maxon Drive
const int enable_pin = 8;   // Pin for enable signal

// Custom drive
const int dri_pwm_pin     = 6 ;  // H bridge drive pwm
const int dri_dir_pin     = 42; //

///////////////////////////////////////////////////////////////////
// Parameters
///////////////////////////////////////////////////////////////////

// Controller

//TODO: VOUS DEVEZ DETERMINEZ DES BONS PARAMETRES SUIVANTS
const float filter_rc  =  0.1;
const float vel_kp     =  10.0; 
const float vel_ki     =  0.0; 
const float vel_kd     =  0.0;
const float pos_kp     =  1.0; 
const float pos_kd     =  0.0;
const float pos_ki     =  0.0; 
const float pos_ei_sat =  10000.0; 

// Loop period 
const unsigned long time_period_low   = 2;    // 500 Hz for internal PID loop
const unsigned long time_period_high  = 10;   // 100 Hz  for ROS communication
const unsigned long time_period_com   = 1000; // 1000 ms = max com delay (watchdog)

// Hardware min-zero-max range for the steering servo and the drive
const int pwm_min_ser = 30  ;
const int pwm_zer_ser = 90  ;
const int pwm_max_ser = 150 ;
const int pwm_min_dri = -511;
const int pwm_zer_dri = 0;
const int pwm_max_dri = 511;

const int dri_wakeup_time = 20; // micro second

// Units Conversion
const double batteryV  = 8;
const double maxAngle  = 40*(2*3.1416)/360;    //max steering angle in rad
const double rad2pwm   = (pwm_zer_ser-pwm_min_ser)/maxAngle;
const double volt2pwm  = (pwm_zer_dri-pwm_min_dri)/batteryV;
const double tick2m    = 0.00000323766; // To confirm

///////////////////////////////////////////////////////////////////
// Memory
///////////////////////////////////////////////////////////////////

// Inputs
float ser_ref    = 0; //rad
float dri_ref    = 0; //volt
int ctl_mode     = 0; // discrete control mode
int dri_standby  = 0; 

// Ouputs
int ser_pwm   = 0;
int   dri_pwm = 0;
float dri_cmd = 0;

// Controller memory (differentiation, filters and integral actions)
signed long enc_now   = 0;
signed long enc_old   = 0;

float pos_now   = 0;
float vel_now   = 0;
float vel_old   = 0;

float vel_error_int = 0 ;
float pos_error_int = 0;

// Loop timing
unsigned long time_now       = 0;
unsigned long time_last_low  = 0;
unsigned long time_last_high = 0;
unsigned long time_last_com  = 0; //com watchdog


///////////////////////////////////////////////////////////////////
// Encoder init/read/reset functions
///////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////
// Convertion functions
///////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////
// Set PWM value
///////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////
// Read propulsion command from ROS
///////////////////////////////////////////////////////////////////
void cmdCallback ( const geometry_msgs::Twist&  twistMsg ){
  
  ser_ref  = -twistMsg.angular.z; //rad
  dri_ref  = twistMsg.linear.x;  // volt or m/s or m
  ctl_mode = twistMsg.linear.z;  // 1    or 2   or 3

  time_last_com = millis(); // for watchdog
}

///////////////////////////////////////////////////////////////////
// Controller One tick
///////////////////////////////////////////////////////////////////
void ctl(){

  if (ctl_mode == 0 ){
    // Zero output
    dri_pwm    = pwm_zer_dri ;
    
    // reset integral actions
    vel_error_int = 0;
    pos_error_int = 0 ;
    digitalWrite(enable_pin, LOW);
  }
  
  ///////////////////////////////////////////////////////
  else if (ctl_mode == 7){
    
    digitalWrite(enable_pin,HIGH);
    dri_cmd = dri_ref*90 + 90;
    Maxon.write(dri_cmd);
    
  }
  ////////////////////////////////////////////////////////
  
  else {

    digitalWrite(enable_pin, LOW);
  }

}


// ROS suscriber
ros::Subscriber<geometry_msgs::Twist> cmdSubscriber("prop_cmd", &cmdCallback) ;


///////////////////////////////////////////////////////////////////
// Arduino Initialization
///////////////////////////////////////////////////////////////////
void setup(){
  
  // Init PWM output Pins
  steeringServo.attach(ser_pin); 
  Maxon.attach(maxon_pin, 1000, 2000);
  pinMode(dri_dir_pin, OUTPUT);
  pinMode(dri_pwm_pin, OUTPUT);
  pinMode(maxon_pin, OUTPUT);
  pinMode(enable_pin, OUTPUT);
  
  // Init Communication
  nodeHandle.getHardware()->setBaud(baud_rate);
  
  // Init ROS
  nodeHandle.initNode();
  nodeHandle.subscribe(cmdSubscriber) ; // Subscribe to the steering and throttle messages
  nodeHandle.advertise(prop_sensors_pub);
  
  //
  delay(3000) ;
  
  nodeHandle.spinOnce();

}


////////////////////////////////////////////////////////////////////
//  Main Control Loop
////////////////////////////////////////////////////////////////////
void loop(){
  
  time_now = millis();

  /////////////////////////////////////////////////////////////
  // Watchdog: stop the car if no recent communication from ROS
  //////////////////////////////////////////////////////////////

  if (( time_now - time_last_com ) > time_period_com ) {
    
    // All-stop
    dri_ref  = 0;  // velocity set-point
    ctl_mode = 2;  // closed-loop velocity mode
    
  }

  ////////////////////////////////////////
  // Low-level controller
  ///////////////////////////////////////

  if (( time_now - time_last_low ) > time_period_low ) {
    
    ctl(); // one control tick

    time_last_low = time_now ;
  }

  ////////////////////////////////////////
  // Sync with ROS high-level controller
  ///////////////////////////////////////

//  unsigned long dt = time_now - time_last_high;
//  if (dt > time_period_high ) {
//
//    // Feedback loop
//    prop_sensors_data[0] = pos_now; // wheel position in m
//    prop_sensors_data[1] = vel_old; // wheel velocity in m/sec
//    
//    // For DEBUG
//    prop_sensors_data[2] = dri_ref; // set point received by arduino
//    prop_sensors_data[3] = dri_cmd; // drive set point in volts
//    prop_sensors_data[4] = dri_pwm; // drive set point in pwm
//    prop_sensors_data[5] = enc_now; // raw encoder counts
//    prop_sensors_data[6] = ser_ref; // steering angle
//    prop_sensors_data[7] = (float)( time_now - time_last_com ); // for com debug
//    prop_sensors_data[8] = (float)dt;
//
//    // Read IMU
//    //imu.readSensor();
//    //prop_sensors_data[9] = imu.getAccelX_mss();
//    //prop_sensors_data[10] = imu.getAccelY_mss();
//    //prop_sensors_data[11] = imu.getAccelZ_mss();
//    //prop_sensors_data[12] = imu.getGyroX_rads();
//    //prop_sensors_data[13] = imu.getGyroY_rads();
//    //prop_sensors_data[14] = imu.getGyroZ_rads();
//    //prop_sensors_data[15] = imu.getMagX_uT();
//    //prop_sensors_data[16] = imu.getMagY_uT();
//    //prop_sensors_data[17] = imu.getMagZ_uT();
//    
//    prop_sensors_msg.data        = &prop_sensors_data[0];
//    prop_sensors_msg.data_length = prop_sensors_msg_length;
//    prop_sensors_pub.publish( &prop_sensors_msg );
    
    // Process ROS Events
    nodeHandle.spinOnce();

    time_last_high = time_now ;

  }
